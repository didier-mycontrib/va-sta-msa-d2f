server {
    listen       80;
	listen 443 default_server ssl;
    #server_name  localhost;
	server_name  www.d-defrance.fr;
	#ssl_certificate     www.example.com.crt;
    #ssl_certificate_key www.example.com.key;
	ssl_certificate     /certs/certificate.pem;
    ssl_certificate_key /certs/certificate.key;
	
	proxy_set_header X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address 
    proxy_set_header X-Forwarded-Proto $scheme; # to forward the  original protocol (HTTP or HTTPS)
    proxy_set_header Host $host; # to forward the original host requested by the client

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;


    #NB: ordre important dans ce fichier : du plus precis au plus general
    #syntaxes basees sur regexp

    # proxy_pass with network alias

    #config pour rediriger les appels WS-REST vers api rest (nodeJs ou SpringBoot ou ...)
    #NB: resolver 127.0.0.11 refer to embedded docker DNS service (used for resolving backend.api.service : backend docker container)
    
	#keycloak oauth2/oidc server (needs HTTPS acces and valid certificates)
	location  ~ ^/keycloak/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://keycloakauth:8989/keycloak/$1?$args;
    }
	
	#ddc-api (backend for ddc-app) , uses mongoDB 
	location  ~ ^/ddc-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-ddc-api.api.service:8231/ddc-api/$1?$args;
    }
	
	#res-api : resources-api  (backend for ddc-app) , uses mongoDB
	location  ~ ^/res-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-ddc-api.api.service:8231/res-api/$1?$args;
    }
	
	#qcm-api : (backend for qcm-app) , uses mongoDB
	location  ~ ^/qcm-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-qcm-api.api.service:8230/qcm-api/$1?$args;
    }
	
	#user-api : (for users of ddc-app or ...) , uses mongoDB
	#not use/useful in future version (keycloak instead)
	location  ~ ^/user-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-user-api.api.service:8232/user-api/$1?$args;
    }
	
	#tp/devise-api : (api for tp) , uses mongoDB
	location  ~ ^/tp/devise-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-tp-api.api.service:8233/devise-api/$1?$args;
    }
	
	#tp/product-api : (api for tp) , uses mongoDB
	location  ~ ^/tp/product-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-tp-api.api.service:8233/product-api/$1?$args;
    }
	
	#tp/standalone-user-api : (api for tp : user for standalone-login-api ) , uses mongoDB
	location  ~ ^/tp/standalone-user-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-tp-api.api.service:8233/standalone-user-api/$1?$args;
    }
	
	#tp/standalone-login-api : (api for tp : login with jwt but without oauth2) , uses mongoDB
	location  ~ ^/tp/standalone-login-api/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-tp-api.api.service:8233/standalone-login-api/$1?$args;
    }
	
	#partie cliente html de tp-api (www.d-defrance.fr/tp/tp-api-html/index.html)
	location  ~ ^/tp/tp-api-html/(.*){
            resolver 127.0.0.11;
            proxy_pass   http://backend-tp-api.api.service:8233/html/$1?$args;
    }
	
	#location  ~ ^/images/(.*){
    #        resolver 127.0.0.11;
    #        proxy_pass   http://backend.api.service:8282/images/$1?$args;
    #}
	
	#location  ~ ^/posts/(.*){
    #        resolver 127.0.0.11;
    #        proxy_pass   http://backend.api.service:8282/posts/$1?$args;
    #}
	
		
	#redirection de /(...)-app/ngr-(.*) (ex : /(...)-app/ngr-welcome) vers /(...)-app/index.html
	location ~ ^/(...)-app/ngr-(.*){
	   rewrite ^/(...)-app/ngr-(.*)$ /$1-app/index.html permanent;
	}
	
	#redirection de /(..)-app/ngr-(.*) (ex : /(..)-app/ngr-welcome) vers /(..)-app/index.html
	location ~ ^/(..)-app/ngr-(.*){
	   rewrite ^/(..)-app/ngr-(.*)$ /$1-app/index.html permanent;
	}
	
	location ~ ^/qcm-app/(.*){
		resolver 127.0.0.11;
		proxy_pass  http://qcm-app.frontend:4000/$1?$args;
	}
	

    #config pour les speudo-urls de angular (router)
    #toutes url/uri en /xxxx (autre que xyzApi/... plus haut)
    #entrainera une redirection vers /index.html :
    #location ~ ^/(.*){
    #         root   /usr/share/nginx/html;
    #         index  index.html index.htm;
    #         try_files $uri $uri/ /index.html;
    #}

    location / {
        root   /usr/share/nginx/html;
        index  index.html; 
		#include       /etc/nginx/mime.types;
		#try_files $uri $uri/ /index.html;
    }


    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    } 

}
